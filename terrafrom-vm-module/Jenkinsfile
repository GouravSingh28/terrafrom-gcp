pipeline {
    agent any
    parameters {
        string(name: 'SERVER_IP', defaultValue: '', description: 'Enter the IP address of the target server')
        string(name: 'Username', defaultValue: 'gouravsingh335', description: 'Enter the username for login')
    }
    environment {
        SSH_CREDENTIALS_ID = 'ssh-user-key'  // Replace with your Jenkins SSH credentials ID
        INSTALL_SCRIPT = "${env.WORKSPACE}/install-script.sh"  // Path to the installation script in the workspace
    }
    stages {
        stage('Validate Input') {
            steps {
                script {
                    if (params.SERVER_IP == '') {
                        error("SERVER_IP parameter is required.")
                    }
                }
            }
        }
        stage('Create Installation Script') {
            steps {
                script {
                    // Create the installation script
                    writeFile(file: "${env.INSTALL_SCRIPT}", text: '''#!/bin/bash

# Update and install prerequisites
sudo apt update -y && sudo apt upgrade -y
sudo apt install -y curl wget git unzip

# Install Docker
sudo apt install -y docker.io
sudo systemctl start docker
sudo systemctl enable docker

# Clone the repository
REPO_URL="https://github.com/your-repo.git"  # Replace with your repository URL
git clone $REPO_URL /opt/your-repo

# Install Java
sudo apt install -y openjdk-17-jdk
JAVA_VERSION=$(java -version 2>&1 | head -n 1)
echo "Java installed: $JAVA_VERSION"

# Download and extract Keycloak
KEYCLOAK_VERSION="21.1.1"  # Replace with your desired version
wget https://github.com/keycloak/keycloak/releases/download/${KEYCLOAK_VERSION}/keycloak-${KEYCLOAK_VERSION}.tar.gz -P /tmp
sudo tar -xzf /tmp/keycloak-${KEYCLOAK_VERSION}.tar.gz -C /opt/
sudo mv /opt/keycloak-${KEYCLOAK_VERSION} /opt/keycloak

# Set permissions
sudo chown -R $(whoami):$(whoami) /opt/keycloak

# Start Keycloak services
cd /opt/keycloak/bin
./kc.sh start-dev

# Print completion message
echo "Setup completed. Keycloak is running."
                    ''')
                }
            }
        }
        stage('Run Installation Script') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: env.SSH_CREDENTIALS_ID, keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')]) {
                    script {
                        // Start ssh-agent and add the key
                        sh """
                        eval \$(ssh-agent -s)
                        ssh-add ${SSH_KEY_FILE}
                        """

                        // Transfer the script to the target server
                        sh """
                        scp -o -i $SSH_KEY_FILE  StrictHostKeyChecking=no ${env.INSTALL_SCRIPT} ${SSH_USER}@${params.SERVER_IP}:/tmp/install-script.sh
                        """

                        // Run the script on the target server
                        sh """
                        ssh -o  StrictHostKeyChecking=no ${SSH_USER}@${params.SERVER_IP} "bash /tmp/install-script.sh"
                        """
                    }
                }
            }
        }
    }
    post {
        success {
            echo "Installation script executed successfully on ${params.SERVER_IP}."
        }
        failure {
            echo "Failed to run the installation script on ${params.SERVER_IP}."
        }
    }
}
